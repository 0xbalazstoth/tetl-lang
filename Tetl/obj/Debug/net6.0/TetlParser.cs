//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\rpgix\RiderProjects\Tetl\Tetl\Content\Tetl.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tetl.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TetlParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, BOOL_OPERATOR=24, 
		LENGTH=25, INTEGER=26, FLOAT=27, STRING=28, CHAR=29, BOOL=30, NULL=31, 
		BYTE=32, FOR=33, IN=34, FOREACH=35, DO=36, WHILE=37, IF=38, ELSE=39, COMMENT=40, 
		LINE_COMMENT=41, LINE_BREAK=42, WS=43, IDENTIFIER=44;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifElseBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_forBlock = 6, RULE_forEachBlock = 7, 
		RULE_block = 8, RULE_assignment = 9, RULE_functionCall = 10, RULE_arrayInit = 11, 
		RULE_indexVariable = 12, RULE_indexInteger = 13, RULE_indexExpression = 14, 
		RULE_variableLength = 15, RULE_variableAtLength = 16, RULE_variableAtIdentifierLength = 17, 
		RULE_dotFields = 18, RULE_nExpression = 19, RULE_expression = 20, RULE_multOp = 21, 
		RULE_addOp = 22, RULE_compareOp = 23, RULE_boolOp = 24, RULE_constant = 25;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifElseBlock", "elseIfBlock", "whileBlock", 
		"forBlock", "forEachBlock", "block", "assignment", "functionCall", "arrayInit", 
		"indexVariable", "indexInteger", "indexExpression", "variableLength", 
		"variableAtLength", "variableAtIdentifierLength", "dotFields", "nExpression", 
		"expression", "multOp", "addOp", "compareOp", "boolOp", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'{'", "'}'", "'='", "','", "'['", "']'", "'.At'", 
		"'.'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", null, "'.Length()'", null, null, null, null, null, 
		"'null'", null, "'for'", "'in'", "'foreach'", "'do'", null, "'if'", "'else'", 
		null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BOOL_OPERATOR", "LENGTH", "INTEGER", "FLOAT", "STRING", "CHAR", "BOOL", 
		"NULL", "BYTE", "FOR", "IN", "FOREACH", "DO", "WHILE", "IF", "ELSE", "COMMENT", 
		"LINE_COMMENT", "LINE_BREAK", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tetl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TetlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TetlParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 52; line();
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		public ForEachBlockContext forEachBlock() {
			return GetRuleContext<ForEachBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; ifElseBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; whileBlock();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; forBlock();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; forEachBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public DotFieldsContext dotFields() {
			return GetRuleContext<DotFieldsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 67; assignment();
				}
				break;

			case 2:
				{
				State = 68; functionCall();
				}
				break;

			case 3:
				{
				State = 69; dotFields();
				}
				break;
			}
			State = 72; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TetlParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TetlParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockContext ifElseBlock() {
		IfElseBlockContext _localctx = new IfElseBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifElseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(IF);
			State = 75; Match(T__1);
			State = 76; expression(0);
			State = 77; Match(T__2);
			State = 78; block();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 79; Match(ELSE);
				State = 80; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 85;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; ifElseBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TetlParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(WHILE);
			State = 88; Match(T__1);
			State = 89; expression(0);
			State = 90; Match(T__2);
			State = 91; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TetlParser.FOR, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterForBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitForBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_forBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(FOR);
			State = 94; Match(T__1);
			State = 95; assignment();
			State = 96; Match(T__0);
			State = 97; expression(0);
			State = 98; Match(T__2);
			State = 99; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachBlockContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode FOREACH() { return GetToken(TetlParser.FOREACH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ForEachBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterForEachBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitForEachBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachBlockContext forEachBlock() {
		ForEachBlockContext _localctx = new ForEachBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_forEachBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(FOREACH);
			State = 102; Match(T__1);
			State = 103; _localctx.varName = Match(IDENTIFIER);
			State = 104; Match(IN);
			State = 105; expression(0);
			State = 106; Match(T__2);
			State = 107; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T__3);
			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 110; line();
				}
				}
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 116; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(IDENTIFIER);
			State = 119; Match(T__5);
			State = 120; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(IDENTIFIER);
			State = 123; Match(T__1);
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__11) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << NULL) | (1L << BYTE) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 124; expression(0);
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6) {
					{
					{
					State = 125; Match(T__6);
					State = 126; expression(0);
					}
					}
					State = 131;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 134; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterArrayInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitArrayInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(T__7);
			State = 137; expression(0);
			State = 142;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 138; Match(T__6);
				State = 139; expression(0);
				}
				}
				State = 144;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 145; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexVariableContext : ParserRuleContext {
		public IToken varName;
		public IToken at;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TetlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TetlParser.IDENTIFIER, i);
		}
		public IndexVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexVariableContext indexVariable() {
		IndexVariableContext _localctx = new IndexVariableContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_indexVariable);
		try {
			State = 156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; _localctx.varName = Match(IDENTIFIER);
				State = 148; Match(T__7);
				State = 149; _localctx.at = Match(IDENTIFIER);
				State = 150; Match(T__8);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; _localctx.varName = Match(IDENTIFIER);
				State = 152; Match(T__9);
				State = 153; Match(T__1);
				State = 154; _localctx.at = Match(IDENTIFIER);
				State = 155; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexIntegerContext : ParserRuleContext {
		public IToken varName;
		public IToken at;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(TetlParser.INTEGER, 0); }
		public IndexIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexInteger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexIntegerContext indexInteger() {
		IndexIntegerContext _localctx = new IndexIntegerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_indexInteger);
		try {
			State = 167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; _localctx.varName = Match(IDENTIFIER);
				State = 159; Match(T__7);
				State = 160; _localctx.at = Match(INTEGER);
				State = 161; Match(T__8);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; _localctx.varName = Match(IDENTIFIER);
				State = 163; Match(T__9);
				State = 164; Match(T__1);
				State = 165; _localctx.at = Match(INTEGER);
				State = 166; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		public IToken varName;
		public ExpressionContext at;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; _localctx.varName = Match(IDENTIFIER);
			State = 170; Match(T__7);
			State = 171; _localctx.at = expression(0);
			State = 172; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableLengthContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public VariableLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableLengthContext variableLength() {
		VariableLengthContext _localctx = new VariableLengthContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_variableLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; _localctx.varName = Match(IDENTIFIER);
			State = 175; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAtLengthContext : ParserRuleContext {
		public IndexIntegerContext indexInteger() {
			return GetRuleContext<IndexIntegerContext>(0);
		}
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public VariableAtLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAtLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAtLengthContext variableAtLength() {
		VariableAtLengthContext _localctx = new VariableAtLengthContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_variableAtLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; indexInteger();
			State = 178; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAtIdentifierLengthContext : ParserRuleContext {
		public IndexVariableContext indexVariable() {
			return GetRuleContext<IndexVariableContext>(0);
		}
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public VariableAtIdentifierLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAtIdentifierLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtIdentifierLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtIdentifierLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtIdentifierLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAtIdentifierLengthContext variableAtIdentifierLength() {
		VariableAtIdentifierLengthContext _localctx = new VariableAtIdentifierLengthContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_variableAtIdentifierLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; indexVariable();
			State = 181; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotFieldsContext : ParserRuleContext {
		public IToken varName;
		public FunctionCallContext dotFunction;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		public DotFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotFields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterDotFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitDotFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotFieldsContext dotFields() {
		DotFieldsContext _localctx = new DotFieldsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_dotFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; _localctx.varName = Match(IDENTIFIER);
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 184; Match(T__10);
				State = 185; _localctx.dotFunction = functionCall();
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterNExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitNExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NExpressionContext nExpression() {
		NExpressionContext _localctx = new NExpressionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_nExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__11);
			State = 192; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexVariableExpressionContext : ExpressionContext {
		public IndexVariableContext indexVariable() {
			return GetRuleContext<IndexVariableContext>(0);
		}
		public IndexVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexIntegerExpressionContext : ExpressionContext {
		public IndexIntegerContext indexInteger() {
			return GetRuleContext<IndexIntegerContext>(0);
		}
		public IndexIntegerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public NExpressionContext nExpression() {
			return GetRuleContext<NExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtIdentifierLengthExpressionContext : ExpressionContext {
		public VariableAtIdentifierLengthContext variableAtIdentifierLength() {
			return GetRuleContext<VariableAtIdentifierLengthContext>(0);
		}
		public VariableAtIdentifierLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtIdentifierLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtIdentifierLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtIdentifierLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionExpressionContext : ExpressionContext {
		public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		public IndexExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexExpressionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexExpressionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableLengthExpressionContext : ExpressionContext {
		public VariableLengthContext variableLength() {
			return GetRuleContext<VariableLengthContext>(0);
		}
		public VariableLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtLengthExpressionContext : ExpressionContext {
		public VariableAtLengthContext variableAtLength() {
			return GetRuleContext<VariableAtLengthContext>(0);
		}
		public VariableAtLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 195; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 196; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 197; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 198; Match(T__1);
				State = 199; expression(0);
				State = 200; Match(T__2);
				}
				break;

			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 202; nExpression();
				}
				break;

			case 6:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 203; arrayInit();
				}
				break;

			case 7:
				{
				_localctx = new IndexVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 204; indexVariable();
				}
				break;

			case 8:
				{
				_localctx = new IndexIntegerExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 205; indexInteger();
				}
				break;

			case 9:
				{
				_localctx = new IndexExpressionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; indexExpression();
				}
				break;

			case 10:
				{
				_localctx = new VariableLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 207; variableLength();
				}
				break;

			case 11:
				{
				_localctx = new VariableAtLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 208; variableAtLength();
				}
				break;

			case 12:
				{
				_localctx = new VariableAtIdentifierLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 209; variableAtIdentifierLength();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 230;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 228;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 213; multOp();
						State = 214; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 217; addOp();
						State = 218; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 220;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 221; compareOp();
						State = 222; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 225; boolOp();
						State = 226; expression(2);
						}
						break;
					}
					} 
				}
				State = 232;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = _input.La(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(TetlParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(TetlParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TetlParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(TetlParser.STRING, 0); }
		public ITerminalNode CHAR() { return GetToken(TetlParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(TetlParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(TetlParser.NULL, 0); }
		public ITerminalNode BYTE() { return GetToken(TetlParser.BYTE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << NULL) | (1L << BYTE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\xF6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\a\x2\x38\n\x2\f\x2\xE\x2;\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x5\x3\x44\n\x3\x3\x4\x3\x4\x3\x4\x5\x4I\n\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5T\n\x5\x3\x6\x3\x6"+
		"\x5\x6X\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\a\nr\n"+
		"\n\f\n\xE\nu\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\a\f\x82\n\f\f\f\xE\f\x85\v\f\x5\f\x87\n\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\a\r\x8F\n\r\f\r\xE\r\x92\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x9F\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xAA\n\xF\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\a\x14\xBD\n\x14\f\x14\xE\x14\xC0\v\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xD5\n\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\xE7\n\x16\f\x16\xE\x16"+
		"\xEA\v\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\x2\x2\x3*\x1C\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x2\x6\x3\x2\xF\x11\x3\x2\x12"+
		"\x13\x3\x2\x14\x19\x3\x2\x1C\"\xFA\x2\x39\x3\x2\x2\x2\x4\x43\x3\x2\x2"+
		"\x2\x6H\x3\x2\x2\x2\bL\x3\x2\x2\x2\nW\x3\x2\x2\x2\fY\x3\x2\x2\x2\xE_\x3"+
		"\x2\x2\x2\x10g\x3\x2\x2\x2\x12o\x3\x2\x2\x2\x14x\x3\x2\x2\x2\x16|\x3\x2"+
		"\x2\x2\x18\x8A\x3\x2\x2\x2\x1A\x9E\x3\x2\x2\x2\x1C\xA9\x3\x2\x2\x2\x1E"+
		"\xAB\x3\x2\x2\x2 \xB0\x3\x2\x2\x2\"\xB3\x3\x2\x2\x2$\xB6\x3\x2\x2\x2&"+
		"\xB9\x3\x2\x2\x2(\xC1\x3\x2\x2\x2*\xD4\x3\x2\x2\x2,\xEB\x3\x2\x2\x2.\xED"+
		"\x3\x2\x2\x2\x30\xEF\x3\x2\x2\x2\x32\xF1\x3\x2\x2\x2\x34\xF3\x3\x2\x2"+
		"\x2\x36\x38\x5\x4\x3\x2\x37\x36\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3"+
		"\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=\a\x2\x2\x3"+
		"=\x3\x3\x2\x2\x2>\x44\x5\x6\x4\x2?\x44\x5\b\x5\x2@\x44\x5\f\a\x2\x41\x44"+
		"\x5\xE\b\x2\x42\x44\x5\x10\t\x2\x43>\x3\x2\x2\x2\x43?\x3\x2\x2\x2\x43"+
		"@\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\x5\x3\x2\x2"+
		"\x2\x45I\x5\x14\v\x2\x46I\x5\x16\f\x2GI\x5&\x14\x2H\x45\x3\x2\x2\x2H\x46"+
		"\x3\x2\x2\x2HG\x3\x2\x2\x2IJ\x3\x2\x2\x2JK\a\x3\x2\x2K\a\x3\x2\x2\x2L"+
		"M\a(\x2\x2MN\a\x4\x2\x2NO\x5*\x16\x2OP\a\x5\x2\x2PS\x5\x12\n\x2QR\a)\x2"+
		"\x2RT\x5\n\x6\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2T\t\x3\x2\x2\x2UX\x5\x12\n"+
		"\x2VX\x5\b\x5\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2X\v\x3\x2\x2\x2YZ\a\'\x2\x2"+
		"Z[\a\x4\x2\x2[\\\x5*\x16\x2\\]\a\x5\x2\x2]^\x5\x12\n\x2^\r\x3\x2\x2\x2"+
		"_`\a#\x2\x2`\x61\a\x4\x2\x2\x61\x62\x5\x14\v\x2\x62\x63\a\x3\x2\x2\x63"+
		"\x64\x5*\x16\x2\x64\x65\a\x5\x2\x2\x65\x66\x5\x12\n\x2\x66\xF\x3\x2\x2"+
		"\x2gh\a%\x2\x2hi\a\x4\x2\x2ij\a.\x2\x2jk\a$\x2\x2kl\x5*\x16\x2lm\a\x5"+
		"\x2\x2mn\x5\x12\n\x2n\x11\x3\x2\x2\x2os\a\x6\x2\x2pr\x5\x4\x3\x2qp\x3"+
		"\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tv\x3\x2\x2\x2us\x3"+
		"\x2\x2\x2vw\a\a\x2\x2w\x13\x3\x2\x2\x2xy\a.\x2\x2yz\a\b\x2\x2z{\x5*\x16"+
		"\x2{\x15\x3\x2\x2\x2|}\a.\x2\x2}\x86\a\x4\x2\x2~\x83\x5*\x16\x2\x7F\x80"+
		"\a\t\x2\x2\x80\x82\x5*\x16\x2\x81\x7F\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2"+
		"\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3"+
		"\x2\x2\x2\x86~\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88"+
		"\x89\a\x5\x2\x2\x89\x17\x3\x2\x2\x2\x8A\x8B\a\n\x2\x2\x8B\x90\x5*\x16"+
		"\x2\x8C\x8D\a\t\x2\x2\x8D\x8F\x5*\x16\x2\x8E\x8C\x3\x2\x2\x2\x8F\x92\x3"+
		"\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2"+
		"\x92\x90\x3\x2\x2\x2\x93\x94\a\v\x2\x2\x94\x19\x3\x2\x2\x2\x95\x96\a."+
		"\x2\x2\x96\x97\a\n\x2\x2\x97\x98\a.\x2\x2\x98\x9F\a\v\x2\x2\x99\x9A\a"+
		".\x2\x2\x9A\x9B\a\f\x2\x2\x9B\x9C\a\x4\x2\x2\x9C\x9D\a.\x2\x2\x9D\x9F"+
		"\a\x5\x2\x2\x9E\x95\x3\x2\x2\x2\x9E\x99\x3\x2\x2\x2\x9F\x1B\x3\x2\x2\x2"+
		"\xA0\xA1\a.\x2\x2\xA1\xA2\a\n\x2\x2\xA2\xA3\a\x1C\x2\x2\xA3\xAA\a\v\x2"+
		"\x2\xA4\xA5\a.\x2\x2\xA5\xA6\a\f\x2\x2\xA6\xA7\a\x4\x2\x2\xA7\xA8\a\x1C"+
		"\x2\x2\xA8\xAA\a\x5\x2\x2\xA9\xA0\x3\x2\x2\x2\xA9\xA4\x3\x2\x2\x2\xAA"+
		"\x1D\x3\x2\x2\x2\xAB\xAC\a.\x2\x2\xAC\xAD\a\n\x2\x2\xAD\xAE\x5*\x16\x2"+
		"\xAE\xAF\a\v\x2\x2\xAF\x1F\x3\x2\x2\x2\xB0\xB1\a.\x2\x2\xB1\xB2\a\x1B"+
		"\x2\x2\xB2!\x3\x2\x2\x2\xB3\xB4\x5\x1C\xF\x2\xB4\xB5\a\x1B\x2\x2\xB5#"+
		"\x3\x2\x2\x2\xB6\xB7\x5\x1A\xE\x2\xB7\xB8\a\x1B\x2\x2\xB8%\x3\x2\x2\x2"+
		"\xB9\xBE\a.\x2\x2\xBA\xBB\a\r\x2\x2\xBB\xBD\x5\x16\f\x2\xBC\xBA\x3\x2"+
		"\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF"+
		"\'\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\a\xE\x2\x2\xC2\xC3\x5*\x16"+
		"\x2\xC3)\x3\x2\x2\x2\xC4\xC5\b\x16\x1\x2\xC5\xD5\x5\x34\x1B\x2\xC6\xD5"+
		"\a.\x2\x2\xC7\xD5\x5\x16\f\x2\xC8\xC9\a\x4\x2\x2\xC9\xCA\x5*\x16\x2\xCA"+
		"\xCB\a\x5\x2\x2\xCB\xD5\x3\x2\x2\x2\xCC\xD5\x5(\x15\x2\xCD\xD5\x5\x18"+
		"\r\x2\xCE\xD5\x5\x1A\xE\x2\xCF\xD5\x5\x1C\xF\x2\xD0\xD5\x5\x1E\x10\x2"+
		"\xD1\xD5\x5 \x11\x2\xD2\xD5\x5\"\x12\x2\xD3\xD5\x5$\x13\x2\xD4\xC4\x3"+
		"\x2\x2\x2\xD4\xC6\x3\x2\x2\x2\xD4\xC7\x3\x2\x2\x2\xD4\xC8\x3\x2\x2\x2"+
		"\xD4\xCC\x3\x2\x2\x2\xD4\xCD\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2\xD4\xCF\x3"+
		"\x2\x2\x2\xD4\xD0\x3\x2\x2\x2\xD4\xD1\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2"+
		"\xD4\xD3\x3\x2\x2\x2\xD5\xE8\x3\x2\x2\x2\xD6\xD7\f\x6\x2\x2\xD7\xD8\x5"+
		",\x17\x2\xD8\xD9\x5*\x16\a\xD9\xE7\x3\x2\x2\x2\xDA\xDB\f\x5\x2\x2\xDB"+
		"\xDC\x5.\x18\x2\xDC\xDD\x5*\x16\x6\xDD\xE7\x3\x2\x2\x2\xDE\xDF\f\x4\x2"+
		"\x2\xDF\xE0\x5\x30\x19\x2\xE0\xE1\x5*\x16\x5\xE1\xE7\x3\x2\x2\x2\xE2\xE3"+
		"\f\x3\x2\x2\xE3\xE4\x5\x32\x1A\x2\xE4\xE5\x5*\x16\x4\xE5\xE7\x3\x2\x2"+
		"\x2\xE6\xD6\x3\x2\x2\x2\xE6\xDA\x3\x2\x2\x2\xE6\xDE\x3\x2\x2\x2\xE6\xE2"+
		"\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2"+
		"\x2\xE9+\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEC\t\x2\x2\x2\xEC-\x3\x2"+
		"\x2\x2\xED\xEE\t\x3\x2\x2\xEE/\x3\x2\x2\x2\xEF\xF0\t\x4\x2\x2\xF0\x31"+
		"\x3\x2\x2\x2\xF1\xF2\a\x1A\x2\x2\xF2\x33\x3\x2\x2\x2\xF3\xF4\t\x5\x2\x2"+
		"\xF4\x35\x3\x2\x2\x2\x11\x39\x43HSWs\x83\x86\x90\x9E\xA9\xBE\xD4\xE6\xE8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tetl.Content
