//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\rpgix\RiderProjects\Tetl\Tetl\Content\Tetl.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tetl.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TetlParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, BOOL_OPERATOR=24, 
		LENGTH=25, INTEGER=26, FLOAT=27, STRING=28, CHAR=29, BOOL=30, NULL=31, 
		BYTE=32, FOR=33, IN=34, FOREACH=35, DO=36, WHILE=37, IF=38, ELSE=39, COMMENT=40, 
		LINE_COMMENT=41, LINE_BREAK=42, WS=43, IDENTIFIER=44;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifElseBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_forBlock = 6, RULE_forEachBlock = 7, 
		RULE_block = 8, RULE_assignment = 9, RULE_functionCall = 10, RULE_arrayInit = 11, 
		RULE_indexVariable = 12, RULE_indexInteger = 13, RULE_indexExpression = 14, 
		RULE_variableLength = 15, RULE_variableAtLength = 16, RULE_variableAtIdentifierLength = 17, 
		RULE_atUpdateValue = 18, RULE_dotFields = 19, RULE_nExpression = 20, RULE_expression = 21, 
		RULE_multOp = 22, RULE_addOp = 23, RULE_compareOp = 24, RULE_boolOp = 25, 
		RULE_constant = 26;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifElseBlock", "elseIfBlock", "whileBlock", 
		"forBlock", "forEachBlock", "block", "assignment", "functionCall", "arrayInit", 
		"indexVariable", "indexInteger", "indexExpression", "variableLength", 
		"variableAtLength", "variableAtIdentifierLength", "atUpdateValue", "dotFields", 
		"nExpression", "expression", "multOp", "addOp", "compareOp", "boolOp", 
		"constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'{'", "'}'", "'='", "','", "'['", "']'", "'.At'", 
		"'.'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", null, "'.Length()'", null, null, null, null, null, 
		"'null'", null, "'for'", "'in'", "'foreach'", "'do'", null, "'if'", "'else'", 
		null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BOOL_OPERATOR", "LENGTH", "INTEGER", "FLOAT", "STRING", "CHAR", "BOOL", 
		"NULL", "BYTE", "FOR", "IN", "FOREACH", "DO", "WHILE", "IF", "ELSE", "COMMENT", 
		"LINE_COMMENT", "LINE_BREAK", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tetl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TetlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TetlParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 54; line();
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 60; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		public ForEachBlockContext forEachBlock() {
			return GetRuleContext<ForEachBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 67;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; ifElseBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; whileBlock();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65; forBlock();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66; forEachBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public DotFieldsContext dotFields() {
			return GetRuleContext<DotFieldsContext>(0);
		}
		public AtUpdateValueContext atUpdateValue() {
			return GetRuleContext<AtUpdateValueContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 69; assignment();
				}
				break;

			case 2:
				{
				State = 70; functionCall();
				}
				break;

			case 3:
				{
				State = 71; dotFields();
				}
				break;

			case 4:
				{
				State = 72; atUpdateValue();
				}
				break;
			}
			State = 75; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TetlParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TetlParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockContext ifElseBlock() {
		IfElseBlockContext _localctx = new IfElseBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifElseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(IF);
			State = 78; Match(T__1);
			State = 79; expression(0);
			State = 80; Match(T__2);
			State = 81; block();
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 82; Match(ELSE);
				State = 83; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 88;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; ifElseBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TetlParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(WHILE);
			State = 91; Match(T__1);
			State = 92; expression(0);
			State = 93; Match(T__2);
			State = 94; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TetlParser.FOR, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterForBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitForBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_forBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(FOR);
			State = 97; Match(T__1);
			State = 98; assignment();
			State = 99; Match(T__0);
			State = 100; expression(0);
			State = 101; Match(T__2);
			State = 102; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachBlockContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode FOREACH() { return GetToken(TetlParser.FOREACH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ForEachBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterForEachBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitForEachBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachBlockContext forEachBlock() {
		ForEachBlockContext _localctx = new ForEachBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_forEachBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(FOREACH);
			State = 105; Match(T__1);
			State = 106; _localctx.varName = Match(IDENTIFIER);
			State = 107; Match(IN);
			State = 108; expression(0);
			State = 109; Match(T__2);
			State = 110; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__3);
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 113; line();
				}
				}
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 119; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(IDENTIFIER);
			State = 122; Match(T__5);
			State = 123; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(IDENTIFIER);
			State = 126; Match(T__1);
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__11) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << NULL) | (1L << BYTE) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 127; expression(0);
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6) {
					{
					{
					State = 128; Match(T__6);
					State = 129; expression(0);
					}
					}
					State = 134;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 137; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterArrayInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitArrayInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitContext arrayInit() {
		ArrayInitContext _localctx = new ArrayInitContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_arrayInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__7);
			State = 140; expression(0);
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 141; Match(T__6);
				State = 142; expression(0);
				}
				}
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 148; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexVariableContext : ParserRuleContext {
		public IToken varName;
		public IToken at;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TetlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TetlParser.IDENTIFIER, i);
		}
		public IndexVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexVariableContext indexVariable() {
		IndexVariableContext _localctx = new IndexVariableContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_indexVariable);
		try {
			State = 159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; _localctx.varName = Match(IDENTIFIER);
				State = 151; Match(T__7);
				State = 152; _localctx.at = Match(IDENTIFIER);
				State = 153; Match(T__8);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; _localctx.varName = Match(IDENTIFIER);
				State = 155; Match(T__9);
				State = 156; Match(T__1);
				State = 157; _localctx.at = Match(IDENTIFIER);
				State = 158; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexIntegerContext : ParserRuleContext {
		public IToken varName;
		public IToken at;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(TetlParser.INTEGER, 0); }
		public IndexIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexInteger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexIntegerContext indexInteger() {
		IndexIntegerContext _localctx = new IndexIntegerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_indexInteger);
		try {
			State = 170;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; _localctx.varName = Match(IDENTIFIER);
				State = 162; Match(T__7);
				State = 163; _localctx.at = Match(INTEGER);
				State = 164; Match(T__8);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; _localctx.varName = Match(IDENTIFIER);
				State = 166; Match(T__9);
				State = 167; Match(T__1);
				State = 168; _localctx.at = Match(INTEGER);
				State = 169; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		public IToken varName;
		public ExpressionContext at;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; _localctx.varName = Match(IDENTIFIER);
			State = 173; Match(T__7);
			State = 174; _localctx.at = expression(0);
			State = 175; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableLengthContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public VariableLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableLengthContext variableLength() {
		VariableLengthContext _localctx = new VariableLengthContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_variableLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; _localctx.varName = Match(IDENTIFIER);
			State = 178; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAtLengthContext : ParserRuleContext {
		public IndexIntegerContext indexInteger() {
			return GetRuleContext<IndexIntegerContext>(0);
		}
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public VariableAtLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAtLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAtLengthContext variableAtLength() {
		VariableAtLengthContext _localctx = new VariableAtLengthContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_variableAtLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; indexInteger();
			State = 181; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAtIdentifierLengthContext : ParserRuleContext {
		public IndexVariableContext indexVariable() {
			return GetRuleContext<IndexVariableContext>(0);
		}
		public ITerminalNode LENGTH() { return GetToken(TetlParser.LENGTH, 0); }
		public VariableAtIdentifierLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAtIdentifierLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtIdentifierLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtIdentifierLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtIdentifierLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAtIdentifierLengthContext variableAtIdentifierLength() {
		VariableAtIdentifierLengthContext _localctx = new VariableAtIdentifierLengthContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_variableAtIdentifierLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; indexVariable();
			State = 184; Match(LENGTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtUpdateValueContext : ParserRuleContext {
		public IToken varName;
		public ExpressionContext at;
		public ExpressionContext value;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AtUpdateValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atUpdateValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAtUpdateValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAtUpdateValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtUpdateValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtUpdateValueContext atUpdateValue() {
		AtUpdateValueContext _localctx = new AtUpdateValueContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_atUpdateValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; _localctx.varName = Match(IDENTIFIER);
			State = 187; Match(T__7);
			State = 188; _localctx.at = expression(0);
			State = 189; Match(T__8);
			State = 190; Match(T__5);
			State = 191; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotFieldsContext : ParserRuleContext {
		public IToken varName;
		public FunctionCallContext dotFunction;
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		public DotFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotFields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterDotFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitDotFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotFieldsContext dotFields() {
		DotFieldsContext _localctx = new DotFieldsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_dotFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; _localctx.varName = Match(IDENTIFIER);
			State = 198;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 194; Match(T__10);
				State = 195; _localctx.dotFunction = functionCall();
				}
				}
				State = 200;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterNExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitNExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NExpressionContext nExpression() {
		NExpressionContext _localctx = new NExpressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_nExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__11);
			State = 202; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		public ArrayInitContext arrayInit() {
			return GetRuleContext<ArrayInitContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexVariableExpressionContext : ExpressionContext {
		public IndexVariableContext indexVariable() {
			return GetRuleContext<IndexVariableContext>(0);
		}
		public IndexVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexIntegerExpressionContext : ExpressionContext {
		public IndexIntegerContext indexInteger() {
			return GetRuleContext<IndexIntegerContext>(0);
		}
		public IndexIntegerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TetlParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public NExpressionContext nExpression() {
			return GetRuleContext<NExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtIdentifierLengthExpressionContext : ExpressionContext {
		public VariableAtIdentifierLengthContext variableAtIdentifierLength() {
			return GetRuleContext<VariableAtIdentifierLengthContext>(0);
		}
		public VariableAtIdentifierLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtIdentifierLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtIdentifierLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtIdentifierLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionExpressionContext : ExpressionContext {
		public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		public IndexExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterIndexExpressionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitIndexExpressionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableLengthExpressionContext : ExpressionContext {
		public VariableLengthContext variableLength() {
			return GetRuleContext<VariableLengthContext>(0);
		}
		public VariableLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAtLengthExpressionContext : ExpressionContext {
		public VariableAtLengthContext variableAtLength() {
			return GetRuleContext<VariableAtLengthContext>(0);
		}
		public VariableAtLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterVariableAtLengthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitVariableAtLengthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 205; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 207; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 208; Match(T__1);
				State = 209; expression(0);
				State = 210; Match(T__2);
				}
				break;

			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; nExpression();
				}
				break;

			case 6:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 213; arrayInit();
				}
				break;

			case 7:
				{
				_localctx = new IndexVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 214; indexVariable();
				}
				break;

			case 8:
				{
				_localctx = new IndexIntegerExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 215; indexInteger();
				}
				break;

			case 9:
				{
				_localctx = new IndexExpressionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 216; indexExpression();
				}
				break;

			case 10:
				{
				_localctx = new VariableLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 217; variableLength();
				}
				break;

			case 11:
				{
				_localctx = new VariableAtLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; variableAtLength();
				}
				break;

			case 12:
				{
				_localctx = new VariableAtIdentifierLengthExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 219; variableAtIdentifierLength();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 223; multOp();
						State = 224; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 227; addOp();
						State = 228; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 231; compareOp();
						State = 232; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 235; boolOp();
						State = 236; expression(2);
						}
						break;
					}
					} 
				}
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = _input.La(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(TetlParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(TetlParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TetlParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(TetlParser.STRING, 0); }
		public ITerminalNode CHAR() { return GetToken(TetlParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(TetlParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(TetlParser.NULL, 0); }
		public ITerminalNode BYTE() { return GetToken(TetlParser.BYTE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITetlListener typedListener = listener as ITetlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITetlVisitor<TResult> typedVisitor = visitor as ITetlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << NULL) | (1L << BYTE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\x100\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\a\x2:\n\x2\f\x2\xE\x2=\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x46\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"L\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5W\n"+
		"\x5\x3\x6\x3\x6\x5\x6[\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\n\x3\n\a\nu\n\n\f\n\xE\nx\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\a\f\x85\n\f\f\f\xE\f\x88\v\f\x5\f\x8A\n\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\r\x3\r\a\r\x92\n\r\f\r\xE\r\x95\v\r\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xA2\n\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xAD\n\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\a\x15\xC7\n\x15\f\x15\xE\x15\xCA\v\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\xDF\n\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\xF1\n\x17\f\x17\xE\x17\xF4\v\x17"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x2\x2\x3,\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x2\x6\x3\x2\xF\x11\x3\x2\x12\x13"+
		"\x3\x2\x14\x19\x3\x2\x1C\"\x104\x2;\x3\x2\x2\x2\x4\x45\x3\x2\x2\x2\x6"+
		"K\x3\x2\x2\x2\bO\x3\x2\x2\x2\nZ\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xE\x62\x3"+
		"\x2\x2\x2\x10j\x3\x2\x2\x2\x12r\x3\x2\x2\x2\x14{\x3\x2\x2\x2\x16\x7F\x3"+
		"\x2\x2\x2\x18\x8D\x3\x2\x2\x2\x1A\xA1\x3\x2\x2\x2\x1C\xAC\x3\x2\x2\x2"+
		"\x1E\xAE\x3\x2\x2\x2 \xB3\x3\x2\x2\x2\"\xB6\x3\x2\x2\x2$\xB9\x3\x2\x2"+
		"\x2&\xBC\x3\x2\x2\x2(\xC3\x3\x2\x2\x2*\xCB\x3\x2\x2\x2,\xDE\x3\x2\x2\x2"+
		".\xF5\x3\x2\x2\x2\x30\xF7\x3\x2\x2\x2\x32\xF9\x3\x2\x2\x2\x34\xFB\x3\x2"+
		"\x2\x2\x36\xFD\x3\x2\x2\x2\x38:\x5\x4\x3\x2\x39\x38\x3\x2\x2\x2:=\x3\x2"+
		"\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2=;\x3\x2\x2\x2>?\a"+
		"\x2\x2\x3?\x3\x3\x2\x2\x2@\x46\x5\x6\x4\x2\x41\x46\x5\b\x5\x2\x42\x46"+
		"\x5\f\a\x2\x43\x46\x5\xE\b\x2\x44\x46\x5\x10\t\x2\x45@\x3\x2\x2\x2\x45"+
		"\x41\x3\x2\x2\x2\x45\x42\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x44\x3\x2"+
		"\x2\x2\x46\x5\x3\x2\x2\x2GL\x5\x14\v\x2HL\x5\x16\f\x2IL\x5(\x15\x2JL\x5"+
		"&\x14\x2KG\x3\x2\x2\x2KH\x3\x2\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2LM\x3"+
		"\x2\x2\x2MN\a\x3\x2\x2N\a\x3\x2\x2\x2OP\a(\x2\x2PQ\a\x4\x2\x2QR\x5,\x17"+
		"\x2RS\a\x5\x2\x2SV\x5\x12\n\x2TU\a)\x2\x2UW\x5\n\x6\x2VT\x3\x2\x2\x2V"+
		"W\x3\x2\x2\x2W\t\x3\x2\x2\x2X[\x5\x12\n\x2Y[\x5\b\x5\x2ZX\x3\x2\x2\x2"+
		"ZY\x3\x2\x2\x2[\v\x3\x2\x2\x2\\]\a\'\x2\x2]^\a\x4\x2\x2^_\x5,\x17\x2_"+
		"`\a\x5\x2\x2`\x61\x5\x12\n\x2\x61\r\x3\x2\x2\x2\x62\x63\a#\x2\x2\x63\x64"+
		"\a\x4\x2\x2\x64\x65\x5\x14\v\x2\x65\x66\a\x3\x2\x2\x66g\x5,\x17\x2gh\a"+
		"\x5\x2\x2hi\x5\x12\n\x2i\xF\x3\x2\x2\x2jk\a%\x2\x2kl\a\x4\x2\x2lm\a.\x2"+
		"\x2mn\a$\x2\x2no\x5,\x17\x2op\a\x5\x2\x2pq\x5\x12\n\x2q\x11\x3\x2\x2\x2"+
		"rv\a\x6\x2\x2su\x5\x4\x3\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2"+
		"vw\x3\x2\x2\x2wy\x3\x2\x2\x2xv\x3\x2\x2\x2yz\a\a\x2\x2z\x13\x3\x2\x2\x2"+
		"{|\a.\x2\x2|}\a\b\x2\x2}~\x5,\x17\x2~\x15\x3\x2\x2\x2\x7F\x80\a.\x2\x2"+
		"\x80\x89\a\x4\x2\x2\x81\x86\x5,\x17\x2\x82\x83\a\t\x2\x2\x83\x85\x5,\x17"+
		"\x2\x84\x82\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87"+
		"\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x89\x81\x3\x2\x2"+
		"\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\a\x5\x2\x2\x8C\x17"+
		"\x3\x2\x2\x2\x8D\x8E\a\n\x2\x2\x8E\x93\x5,\x17\x2\x8F\x90\a\t\x2\x2\x90"+
		"\x92\x5,\x17\x2\x91\x8F\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2"+
		"\x2\x2\x93\x94\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96"+
		"\x97\a\v\x2\x2\x97\x19\x3\x2\x2\x2\x98\x99\a.\x2\x2\x99\x9A\a\n\x2\x2"+
		"\x9A\x9B\a.\x2\x2\x9B\xA2\a\v\x2\x2\x9C\x9D\a.\x2\x2\x9D\x9E\a\f\x2\x2"+
		"\x9E\x9F\a\x4\x2\x2\x9F\xA0\a.\x2\x2\xA0\xA2\a\x5\x2\x2\xA1\x98\x3\x2"+
		"\x2\x2\xA1\x9C\x3\x2\x2\x2\xA2\x1B\x3\x2\x2\x2\xA3\xA4\a.\x2\x2\xA4\xA5"+
		"\a\n\x2\x2\xA5\xA6\a\x1C\x2\x2\xA6\xAD\a\v\x2\x2\xA7\xA8\a.\x2\x2\xA8"+
		"\xA9\a\f\x2\x2\xA9\xAA\a\x4\x2\x2\xAA\xAB\a\x1C\x2\x2\xAB\xAD\a\x5\x2"+
		"\x2\xAC\xA3\x3\x2\x2\x2\xAC\xA7\x3\x2\x2\x2\xAD\x1D\x3\x2\x2\x2\xAE\xAF"+
		"\a.\x2\x2\xAF\xB0\a\n\x2\x2\xB0\xB1\x5,\x17\x2\xB1\xB2\a\v\x2\x2\xB2\x1F"+
		"\x3\x2\x2\x2\xB3\xB4\a.\x2\x2\xB4\xB5\a\x1B\x2\x2\xB5!\x3\x2\x2\x2\xB6"+
		"\xB7\x5\x1C\xF\x2\xB7\xB8\a\x1B\x2\x2\xB8#\x3\x2\x2\x2\xB9\xBA\x5\x1A"+
		"\xE\x2\xBA\xBB\a\x1B\x2\x2\xBB%\x3\x2\x2\x2\xBC\xBD\a.\x2\x2\xBD\xBE\a"+
		"\n\x2\x2\xBE\xBF\x5,\x17\x2\xBF\xC0\a\v\x2\x2\xC0\xC1\a\b\x2\x2\xC1\xC2"+
		"\x5,\x17\x2\xC2\'\x3\x2\x2\x2\xC3\xC8\a.\x2\x2\xC4\xC5\a\r\x2\x2\xC5\xC7"+
		"\x5\x16\f\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9)\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a"+
		"\xE\x2\x2\xCC\xCD\x5,\x17\x2\xCD+\x3\x2\x2\x2\xCE\xCF\b\x17\x1\x2\xCF"+
		"\xDF\x5\x36\x1C\x2\xD0\xDF\a.\x2\x2\xD1\xDF\x5\x16\f\x2\xD2\xD3\a\x4\x2"+
		"\x2\xD3\xD4\x5,\x17\x2\xD4\xD5\a\x5\x2\x2\xD5\xDF\x3\x2\x2\x2\xD6\xDF"+
		"\x5*\x16\x2\xD7\xDF\x5\x18\r\x2\xD8\xDF\x5\x1A\xE\x2\xD9\xDF\x5\x1C\xF"+
		"\x2\xDA\xDF\x5\x1E\x10\x2\xDB\xDF\x5 \x11\x2\xDC\xDF\x5\"\x12\x2\xDD\xDF"+
		"\x5$\x13\x2\xDE\xCE\x3\x2\x2\x2\xDE\xD0\x3\x2\x2\x2\xDE\xD1\x3\x2\x2\x2"+
		"\xDE\xD2\x3\x2\x2\x2\xDE\xD6\x3\x2\x2\x2\xDE\xD7\x3\x2\x2\x2\xDE\xD8\x3"+
		"\x2\x2\x2\xDE\xD9\x3\x2\x2\x2\xDE\xDA\x3\x2\x2\x2\xDE\xDB\x3\x2\x2\x2"+
		"\xDE\xDC\x3\x2\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF\xF2\x3\x2\x2\x2\xE0\xE1\f"+
		"\x6\x2\x2\xE1\xE2\x5.\x18\x2\xE2\xE3\x5,\x17\a\xE3\xF1\x3\x2\x2\x2\xE4"+
		"\xE5\f\x5\x2\x2\xE5\xE6\x5\x30\x19\x2\xE6\xE7\x5,\x17\x6\xE7\xF1\x3\x2"+
		"\x2\x2\xE8\xE9\f\x4\x2\x2\xE9\xEA\x5\x32\x1A\x2\xEA\xEB\x5,\x17\x5\xEB"+
		"\xF1\x3\x2\x2\x2\xEC\xED\f\x3\x2\x2\xED\xEE\x5\x34\x1B\x2\xEE\xEF\x5,"+
		"\x17\x4\xEF\xF1\x3\x2\x2\x2\xF0\xE0\x3\x2\x2\x2\xF0\xE4\x3\x2\x2\x2\xF0"+
		"\xE8\x3\x2\x2\x2\xF0\xEC\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2"+
		"\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3-\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6"+
		"\t\x2\x2\x2\xF6/\x3\x2\x2\x2\xF7\xF8\t\x3\x2\x2\xF8\x31\x3\x2\x2\x2\xF9"+
		"\xFA\t\x4\x2\x2\xFA\x33\x3\x2\x2\x2\xFB\xFC\a\x1A\x2\x2\xFC\x35\x3\x2"+
		"\x2\x2\xFD\xFE\t\x5\x2\x2\xFE\x37\x3\x2\x2\x2\x11;\x45KVZv\x86\x89\x93"+
		"\xA1\xAC\xC8\xDE\xF0\xF2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tetl.Content
